# schemas.py
from extensions import ma, db   # Import Marshmallow and DB instances
from models.models import Patient, Admission # Import the Patient model

# Define the Schema based on the Patient model
class PatientSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Patient         # Link to the SQLAlchemy model
        load_instance = True    # Creates model instance during loading (optional but convenient)
        sqla_session = db.session # Provide the session for loading instances
        include_fk = True       # Include foreign keys like attending_id

class AdmissionSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Admission       # Link to the Admission model
        load_instance = True    # Creates model instance during loading
        sqla_session = db.session # Provide the session
        include_fk = True       # Include foreign keys (patient_id, admitting_physician_id)
    
    # Optional: If you want to customize fields further or exclude some
    # exclude = ("some_internal_field",) # Fields to exclude from output
    # dump_only = ("id", "created_at") # Fields that are read-only (e.g., generated by DB)

# Create instances of the schema: one for single objects, one for lists
patient_schema = PatientSchema()
patients_schema = PatientSchema(many=True) # Use this for lists of patients

# Inside schemas.py, AFTER the class definitions
admission_schema = AdmissionSchema()
admissions_schema = AdmissionSchema(many=True)